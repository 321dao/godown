// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		FSMCommand
		UpdateMetadataRequest
		UpdateMetadataResponse
		ExecuteCommandRequest
		ExecuteCommandResponse
		AddToClusterRequest
		AddToClusterResponse
*/
package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_centrifugal_centrifugo_libcentrifugo_raw "github.com/centrifugal/centrifugo/libcentrifugo/raw"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FSMCommandType int32

const (
	FSMApplyCommand  FSMCommandType = 0
	FSMApplyMetadata FSMCommandType = 1
)

var FSMCommandType_name = map[int32]string{
	0: "APPLY_COMMAND",
	1: "APPLY_METADATA",
}
var FSMCommandType_value = map[string]int32{
	"APPLY_COMMAND":  0,
	"APPLY_METADATA": 1,
}

func (x FSMCommandType) String() string {
	return proto.EnumName(FSMCommandType_name, int32(x))
}
func (FSMCommandType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

// CommandExecutionReply describes all available replies.
type CommandExecutionReply int32

const (
	NilCommandReply       CommandExecutionReply = 0
	OkCommandReply        CommandExecutionReply = 1
	RawStringCommandReply CommandExecutionReply = 2
	StringCommandReply    CommandExecutionReply = 3
	IntCommandReply       CommandExecutionReply = 4
	SliceCommandReply     CommandExecutionReply = 5
	ErrCommandReply       CommandExecutionReply = 6
)

var CommandExecutionReply_name = map[int32]string{
	0: "NIL",
	1: "OK",
	2: "RAW_STRING",
	3: "STRING",
	4: "INT",
	5: "SLICE",
	6: "ERR",
}
var CommandExecutionReply_value = map[string]int32{
	"NIL":        0,
	"OK":         1,
	"RAW_STRING": 2,
	"STRING":     3,
	"INT":        4,
	"SLICE":      5,
	"ERR":        6,
}

func (x CommandExecutionReply) String() string {
	return proto.EnumName(CommandExecutionReply_name, int32(x))
}
func (CommandExecutionReply) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

type FSMCommand struct {
	Type    FSMCommandType                                          `protobuf:"varint,1,opt,name=type,proto3,enum=FSMCommandType" json:"type,omitempty"`
	Command github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw `protobuf:"bytes,2,opt,name=command,proto3,customtype=github.com/centrifugal/centrifugo/libcentrifugo/raw.Raw" json:"command"`
}

func (m *FSMCommand) Reset()                    { *m = FSMCommand{} }
func (m *FSMCommand) String() string            { return proto.CompactTextString(m) }
func (*FSMCommand) ProtoMessage()               {}
func (*FSMCommand) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *FSMCommand) GetType() FSMCommandType {
	if m != nil {
		return m.Type
	}
	return FSMApplyCommand
}

// UpdateMetadataRequest is used to update meta info in the raft FSM.
type UpdateMetadataRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *UpdateMetadataRequest) Reset()                    { *m = UpdateMetadataRequest{} }
func (m *UpdateMetadataRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateMetadataRequest) ProtoMessage()               {}
func (*UpdateMetadataRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *UpdateMetadataRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateMetadataRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// UpdateMetadataResponse is a response on the UpdateMetadataRequest.
type UpdateMetadataResponse struct {
}

func (m *UpdateMetadataResponse) Reset()                    { *m = UpdateMetadataResponse{} }
func (m *UpdateMetadataResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateMetadataResponse) ProtoMessage()               {}
func (*UpdateMetadataResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

// ExecuteCommandRequest is a request to execute a command.
type ExecuteCommandRequest struct {
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *ExecuteCommandRequest) Reset()                    { *m = ExecuteCommandRequest{} }
func (m *ExecuteCommandRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteCommandRequest) ProtoMessage()               {}
func (*ExecuteCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *ExecuteCommandRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

// ExecuteCommandResponse is a response on the ExecuteCommandRequest.
type ExecuteCommandResponse struct {
	Reply CommandExecutionReply `protobuf:"varint,1,opt,name=reply,proto3,enum=CommandExecutionReply" json:"reply,omitempty"`
	Item  string                `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	Items []string              `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

func (m *ExecuteCommandResponse) Reset()                    { *m = ExecuteCommandResponse{} }
func (m *ExecuteCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteCommandResponse) ProtoMessage()               {}
func (*ExecuteCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *ExecuteCommandResponse) GetReply() CommandExecutionReply {
	if m != nil {
		return m.Reply
	}
	return NilCommandReply
}

func (m *ExecuteCommandResponse) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

func (m *ExecuteCommandResponse) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

// AddToClusterRequest is a request to add a new raft node to the cluster.
type AddToClusterRequest struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (m *AddToClusterRequest) Reset()                    { *m = AddToClusterRequest{} }
func (m *AddToClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*AddToClusterRequest) ProtoMessage()               {}
func (*AddToClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *AddToClusterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddToClusterRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

// AddToClusterResponse is a reponse on the AddToClusterRequest.
type AddToClusterResponse struct {
}

func (m *AddToClusterResponse) Reset()                    { *m = AddToClusterResponse{} }
func (m *AddToClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*AddToClusterResponse) ProtoMessage()               {}
func (*AddToClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func init() {
	proto.RegisterType((*FSMCommand)(nil), "FSMCommand")
	proto.RegisterType((*UpdateMetadataRequest)(nil), "UpdateMetadataRequest")
	proto.RegisterType((*UpdateMetadataResponse)(nil), "UpdateMetadataResponse")
	proto.RegisterType((*ExecuteCommandRequest)(nil), "ExecuteCommandRequest")
	proto.RegisterType((*ExecuteCommandResponse)(nil), "ExecuteCommandResponse")
	proto.RegisterType((*AddToClusterRequest)(nil), "AddToClusterRequest")
	proto.RegisterType((*AddToClusterResponse)(nil), "AddToClusterResponse")
	proto.RegisterEnum("FSMCommandType", FSMCommandType_name, FSMCommandType_value)
	proto.RegisterEnum("CommandExecutionReply", CommandExecutionReply_name, CommandExecutionReply_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Godown service

type GodownClient interface {
	ExecuteCommand(ctx context.Context, in *ExecuteCommandRequest, opts ...grpc.CallOption) (*ExecuteCommandResponse, error)
	AddToCluster(ctx context.Context, in *AddToClusterRequest, opts ...grpc.CallOption) (*AddToClusterResponse, error)
}

type godownClient struct {
	cc *grpc.ClientConn
}

func NewGodownClient(cc *grpc.ClientConn) GodownClient {
	return &godownClient{cc}
}

func (c *godownClient) ExecuteCommand(ctx context.Context, in *ExecuteCommandRequest, opts ...grpc.CallOption) (*ExecuteCommandResponse, error) {
	out := new(ExecuteCommandResponse)
	err := grpc.Invoke(ctx, "/Godown/ExecuteCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *godownClient) AddToCluster(ctx context.Context, in *AddToClusterRequest, opts ...grpc.CallOption) (*AddToClusterResponse, error) {
	out := new(AddToClusterResponse)
	err := grpc.Invoke(ctx, "/Godown/AddToCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Godown service

type GodownServer interface {
	ExecuteCommand(context.Context, *ExecuteCommandRequest) (*ExecuteCommandResponse, error)
	AddToCluster(context.Context, *AddToClusterRequest) (*AddToClusterResponse, error)
}

func RegisterGodownServer(s *grpc.Server, srv GodownServer) {
	s.RegisterService(&_Godown_serviceDesc, srv)
}

func _Godown_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodownServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Godown/ExecuteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodownServer).ExecuteCommand(ctx, req.(*ExecuteCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Godown_AddToCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodownServer).AddToCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Godown/AddToCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodownServer).AddToCluster(ctx, req.(*AddToClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Godown_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Godown",
	HandlerType: (*GodownServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteCommand",
			Handler:    _Godown_ExecuteCommand_Handler,
		},
		{
			MethodName: "AddToCluster",
			Handler:    _Godown_AddToCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *FSMCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FSMCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.Command.Size()))
	n1, err := m.Command.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *UpdateMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *UpdateMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ExecuteCommandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteCommandRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	return i, nil
}

func (m *ExecuteCommandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteCommandResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reply != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Reply))
	}
	if len(m.Item) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Item)))
		i += copy(dAtA[i:], m.Item)
	}
	if len(m.Items) > 0 {
		for _, s := range m.Items {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *AddToClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddToClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	return i, nil
}

func (m *AddToClusterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddToClusterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64Api(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Api(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FSMCommand) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = m.Command.Size()
	n += 1 + l + sovApi(uint64(l))
	return n
}

func (m *UpdateMetadataRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UpdateMetadataResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ExecuteCommandRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ExecuteCommandResponse) Size() (n int) {
	var l int
	_ = l
	if m.Reply != 0 {
		n += 1 + sovApi(uint64(m.Reply))
	}
	l = len(m.Item)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, s := range m.Items {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *AddToClusterRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AddToClusterResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FSMCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FSMCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FSMCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (FSMCommandType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteCommandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteCommandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteCommandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteCommandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteCommandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteCommandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= (CommandExecutionReply(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddToClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddToClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddToClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddToClusterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddToClusterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddToClusterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 602 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4f, 0x4f, 0xdb, 0x4e,
	0x10, 0xc5, 0xf9, 0xf7, 0x13, 0x23, 0x7e, 0xc1, 0x5d, 0x92, 0x34, 0xb5, 0x50, 0xb0, 0x5c, 0xa9,
	0xa2, 0xa8, 0x35, 0x2a, 0x3d, 0x54, 0x55, 0x0f, 0xc8, 0x84, 0x80, 0xa2, 0x92, 0x80, 0x36, 0xae,
	0x2a, 0x4e, 0x68, 0x13, 0x2f, 0xc1, 0xc2, 0xf1, 0xba, 0xce, 0xba, 0x69, 0xee, 0x3d, 0x20, 0xab,
	0x5f, 0xc1, 0xa7, 0x7e, 0x19, 0x8e, 0x3d, 0xf7, 0x80, 0x2a, 0x3e, 0x49, 0x65, 0x6f, 0x0c, 0x71,
	0x94, 0x9e, 0x3c, 0xb3, 0xef, 0xcd, 0xdb, 0xb7, 0x33, 0x63, 0x58, 0x25, 0x9e, 0xad, 0x7b, 0x3e,
	0xe3, 0x4c, 0x79, 0x3d, 0xb4, 0xf9, 0x55, 0xd0, 0xd7, 0x07, 0x6c, 0xb4, 0x3b, 0x64, 0x43, 0xb6,
	0x9b, 0x1c, 0xf7, 0x83, 0xcb, 0x24, 0x4b, 0x92, 0x24, 0x12, 0x74, 0xed, 0x87, 0x04, 0x70, 0xd4,
	0xeb, 0x34, 0xd9, 0x68, 0x44, 0x5c, 0x0b, 0x3d, 0x87, 0x02, 0x9f, 0x7a, 0xb4, 0x2e, 0xa9, 0xd2,
	0x76, 0x79, 0x6f, 0x5d, 0x7f, 0x84, 0xcc, 0xa9, 0x47, 0x71, 0x02, 0xa2, 0x73, 0xf8, 0x6f, 0x20,
	0x0e, 0xeb, 0x39, 0x55, 0xda, 0x5e, 0x3b, 0xd8, 0xbf, 0xbd, 0xdb, 0x5a, 0xf9, 0x7d, 0xb7, 0xf5,
	0x6e, 0xee, 0xee, 0x01, 0x75, 0xb9, 0x6f, 0x5f, 0x06, 0x43, 0xe2, 0x3c, 0xc6, 0x6c, 0xd7, 0xb1,
	0xfb, 0x73, 0x99, 0x4f, 0x26, 0x3a, 0x26, 0x13, 0x9c, 0xea, 0x69, 0xfb, 0x50, 0xfd, 0xe4, 0x59,
	0x84, 0xd3, 0x0e, 0xe5, 0xc4, 0x22, 0x9c, 0x60, 0xfa, 0x25, 0xa0, 0x63, 0x8e, 0x64, 0xc8, 0x5f,
	0xd3, 0x69, 0xe2, 0x6b, 0x15, 0xc7, 0x21, 0xaa, 0x40, 0xf1, 0x2b, 0x71, 0x02, 0x9a, 0x78, 0x58,
	0xc5, 0x22, 0xd1, 0xea, 0x50, 0x5b, 0x14, 0x18, 0x7b, 0xcc, 0x1d, 0x53, 0xed, 0x0d, 0x54, 0x5b,
	0xdf, 0xe8, 0x20, 0xe0, 0x74, 0xf6, 0xa2, 0x54, 0xba, 0xfe, 0xf8, 0x1c, 0x21, 0xff, 0xe0, 0xc6,
	0x83, 0xda, 0x62, 0x89, 0x10, 0x43, 0xaf, 0xa0, 0xe8, 0x53, 0xcf, 0x99, 0xce, 0x1a, 0x55, 0xd3,
	0x67, 0x04, 0x41, 0xb7, 0x99, 0x8b, 0x63, 0x14, 0x0b, 0x12, 0x42, 0x50, 0xb0, 0x39, 0x1d, 0xcd,
	0x9c, 0x26, 0x71, 0x6c, 0x3f, 0xfe, 0x8e, 0xeb, 0x79, 0x35, 0x1f, 0xdb, 0x4f, 0x12, 0xed, 0x3d,
	0x6c, 0x18, 0x96, 0x65, 0xb2, 0xa6, 0x13, 0x8c, 0x39, 0xf5, 0x53, 0x8b, 0x65, 0xc8, 0xd9, 0xa9,
	0xbb, 0x9c, 0x6d, 0xc5, 0x82, 0xc4, 0xb2, 0xfc, 0x54, 0x30, 0x8e, 0xb5, 0x1a, 0x54, 0xb2, 0xa5,
	0xc2, 0xea, 0xce, 0x15, 0x94, 0xb3, 0x53, 0x44, 0x2f, 0xe0, 0x7f, 0xe3, 0xec, 0xec, 0xe4, 0xfc,
	0xa2, 0x79, 0xda, 0xe9, 0x18, 0xdd, 0x43, 0x79, 0x45, 0xd9, 0x08, 0x23, 0x75, 0xfd, 0xa8, 0xd7,
	0x31, 0x3c, 0xcf, 0x99, 0xa6, 0xcb, 0xb0, 0x0d, 0x65, 0xc1, 0xeb, 0xb4, 0x4c, 0xe3, 0xd0, 0x30,
	0x0d, 0x59, 0x52, 0x2a, 0x61, 0xa4, 0xca, 0x29, 0x31, 0xed, 0xb1, 0x52, 0xb8, 0xf9, 0xd9, 0x58,
	0xd9, 0xf9, 0x9e, 0x83, 0xea, 0xd2, 0x3e, 0xa0, 0x4d, 0xc8, 0x77, 0xdb, 0x27, 0xe9, 0x3d, 0x5d,
	0xdb, 0x79, 0xe8, 0x67, 0x8c, 0x2a, 0x90, 0x3b, 0xfd, 0x28, 0x4b, 0x0a, 0x0a, 0x23, 0xb5, 0x7c,
	0x7a, 0x9d, 0xc1, 0x5e, 0x02, 0x60, 0xe3, 0xf3, 0x45, 0xcf, 0xc4, 0xed, 0xee, 0xb1, 0x9c, 0x53,
	0x9e, 0x85, 0x91, 0x5a, 0xc5, 0x64, 0xd2, 0xe3, 0xbe, 0xed, 0x0e, 0x33, 0x54, 0x0d, 0x4a, 0x33,
	0x5a, 0x5e, 0xa9, 0x85, 0x91, 0x8a, 0x96, 0x70, 0x36, 0x21, 0xdf, 0xee, 0x9a, 0x72, 0x41, 0x18,
	0x69, 0xbb, 0x3c, 0x83, 0xaa, 0x50, 0xec, 0x9d, 0xb4, 0x9b, 0x2d, 0xb9, 0xa8, 0x54, 0xc3, 0x48,
	0x7d, 0xd2, 0x73, 0xec, 0x01, 0x5d, 0xac, 0x6f, 0x61, 0x2c, 0x97, 0x44, 0x7d, 0xcb, 0xf7, 0xe7,
	0x51, 0xd1, 0x86, 0xbd, 0x1b, 0x09, 0x4a, 0xc7, 0xcc, 0x62, 0x13, 0x17, 0x19, 0x50, 0xce, 0x2e,
	0x10, 0xaa, 0xe9, 0x4b, 0x97, 0x50, 0x79, 0xaa, 0xff, 0x63, 0xd3, 0x3e, 0xc0, 0xda, 0xfc, 0x58,
	0x51, 0x45, 0x5f, 0xb2, 0x20, 0x4a, 0x55, 0x5f, 0x36, 0xfb, 0x83, 0xb5, 0xdb, 0xfb, 0x86, 0xf4,
	0xeb, 0xbe, 0x21, 0xfd, 0xb9, 0x6f, 0x48, 0xfd, 0x52, 0xf2, 0xcb, 0xbf, 0xfd, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x53, 0x46, 0x93, 0x06, 0x2e, 0x04, 0x00, 0x00,
}
