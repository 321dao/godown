// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/storage/storage.go

// Package test is a generated GoMock package.
package test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/namreg/godown-v2/internal/pkg/storage"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Put mocks base method
func (m *MockStorage) Put(key storage.Key, setter storage.ValueSetter) error {
	ret := m.ctrl.Call(m, "Put", key, setter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockStorageMockRecorder) Put(key, setter interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStorage)(nil).Put), key, setter)
}

// Get mocks base method
func (m *MockStorage) Get(key storage.Key) (*storage.Value, error) {
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*storage.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStorageMockRecorder) Get(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), key)
}

// Del mocks base method
func (m *MockStorage) Del(key storage.Key) error {
	ret := m.ctrl.Call(m, "Del", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockStorageMockRecorder) Del(key interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockStorage)(nil).Del), key)
}

// Keys mocks base method
func (m *MockStorage) Keys() ([]storage.Key, error) {
	ret := m.ctrl.Call(m, "Keys")
	ret0, _ := ret[0].([]storage.Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keys indicates an expected call of Keys
func (mr *MockStorageMockRecorder) Keys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockStorage)(nil).Keys))
}

// All mocks base method
func (m *MockStorage) All() (map[storage.Key]*storage.Value, error) {
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(map[storage.Key]*storage.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockStorageMockRecorder) All() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockStorage)(nil).All))
}

// AllWithTTL mocks base method
func (m *MockStorage) AllWithTTL() (map[storage.Key]*storage.Value, error) {
	ret := m.ctrl.Call(m, "AllWithTTL")
	ret0, _ := ret[0].(map[storage.Key]*storage.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithTTL indicates an expected call of AllWithTTL
func (mr *MockStorageMockRecorder) AllWithTTL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithTTL", reflect.TypeOf((*MockStorage)(nil).AllWithTTL))
}
